/*
 * PE 0 
 * ---------------------------------------
 * 2  | (4,) | (0,-) | (0,-) | (1,) | (2,)  | (0,-)  i = w*d
 * 3  | (4,) | (6,)  | (0,-) | (1,) | (2,)  | (4,)   i,n = i + w*d
 * 0  | (4,) | (6,)  | (0,-) | (6,) | (4,)  | (0,-)  i,n = i + n
 * 0  | (4,) | (7,)  | (0,-) | (6,) | (4,)  | (0,-)  i,b = i + n
 * 0  | (4,) | (6,)  | (0,-) | (7,) | (4,)  | (0,-)  i,n = i + b
 * 0  | (4,) | (8,)  | (0,-) | (6,) | (4,)  | (0,-)  i,gb = i + n
 * 0  | (4,) | (0,-) | (0,-) | (8,) | (4,)  | (0,-)  i = i + gb
 * 6  | (4,) | (7,)  | (0,-) | (4,) | (0,-) | (0,-)  i = sigmoid(i)  
 * 1  | (4,) | (7,)  | (8,)  | (2,) | (4,)  | (0,-)  i = y - i
 * 2  | (4,) | (3,)  | (0,-) | (4,) | (2,)  | (0,-)  i,gr = i*d
 * 2  | (4,) | (3,)  | (0,-) | (4,) | (2,)  | (0,-)  i,gr = i*d
 * 2  | (4,) | (0,-) | (0,-) | (4,) | (4,)  | (0,-)  i = i*i			\\here the i is interim register
 * 3  | (4,) | (0,-) | (0,-) | (4,) | (4,)  | (4,)   i = i + i*i		\\here i*i is a different interim register than the one above
 * 0  | (4,) | (6,)  | (0,-) | (6,) | (4,)  | (0,-)  i,n = i + n
 * 0  | (4,) | (7,)  | (0,-) | (6,) | (4,)  | (0,-)  i,b = i + n
 * 0  | (4,) | (6,)  | (0,-) | (7,) | (4,)  | (0,-)  i,n = i + b
 * 0  | (4,) | (8,)  | (0,-) | (6,) | (4,)  | (0,-)  i,gb = i + n
 * 0  | (4,) | (0,-) | (0,-) | (8,) | (4,)  | (0,-)  i = i + gb
 * 2  | (4,) | (0,-) | (0,-) | (4,) | (5,)  | (0,-)  i = i*m
 * 3  | (4,) | (3,)  | (0,-) | (3,) | (5,)  | (4,)   i,gr = i + gr*m	\\here the gr is the Eg
 * 4  | (3,) | (0,-) | (0,-) | (4,) | (3,)  | (0,-)  i = gr/i			\\here the gr is the Ex
 * 5  | (4,) | (7,)  | (8,)  | (4,) | (0,-) | (0,-)  i = sqrt(i)
 * 2  | (4,) | (0,-) | (0,-) | (4,) | (5,)  | (0,-)  i = i*gr
 * 1  | (1,) | (0,-) | (0,-) | (1,) | (4,)  | (0,-)  w = w - i
 * 1  | (1,) | (0,-) | (0,-) | (1,) | (4,)  | (0,-)  w = w - i
 * 2  | (4,) | (0,-) | (0,-) | (4,) | (4,)  | (0,-)  i = i*i
 * 3  | (4,) | (0,-) | (0,-) | (4,) | (4,)  | (4,)   i = i + i*i		\\here i*i is a different interim register than the one above
 * 0  | (4,) | (6,)  | (0,-) | (6,) | (4,)  | (0,-)  i,n = i + n
 * 0  | (4,) | (7,)  | (0,-) | (6,) | (4,)  | (0,-)  i,b = i + n
 * 0  | (4,) | (6,)  | (0,-) | (7,) | (4,)  | (0,-)  i,n = i + b
 * 0  | (4,) | (8,)  | (0,-) | (6,) | (4,)  | (0,-)  i,gb = i + n
 * 0  | (4,) | (0,-) | (0,-) | (8,) | (4,)  | (0,-)  i = i + gb
 * 2  | (4,) | (0,-) | (0,-) | (4,) | (5,)  | (0,-)  i = i*m
 * 3  | (3,) | (0,-) | (0,-) | (4,) | (5,)  | (4,)   gr = i + gr*m \\here the gr is the Ex
 */


//How to send data on a bus when multiple PEs contend for it
 /* 
  * PE0:
  * 	Fn | (7,-) | (D1,)  | (D2,) | (S0,) | (S1,)  | (s2,-)  b, d1, d2 = Fn(s0, s1, s2)
  * PE1:
  *     0  | (0,-) | (0,-)  | (0,-) | (7,0) | (0,-)  | (0,-)  b
  * 	Fn | (7,-) | (D1,)  | (D2,) | (S0,) | (S1,)  | (s2,-)  b, d1, d2 = Fn(s0, s1, s2)
  * PE2
  *     0  | (0,-) | (0,-)  | (0,-) | (7,0) | (0,-)  | (0,-)  b
  *     0  | (0,-) | (0,-)  | (0,-) | (7,0) | (0,-)  | (0,-)  b
  * 	Fn | (7,-) | (D1,)  | (D2,) | (S0,) | (S1,)  | (s2,-)  b, d1, d2 = Fn(s0, s1, s2)
  * PE3
  *     0  | (0,-) | (0,-)  | (0,-) | (7,0) | (0,-)  | (0,-)  b
  *     0  | (0,-) | (0,-)  | (0,-) | (7,0) | (0,-)  | (0,-)  b
  *     0  | (0,-) | (0,-)  | (0,-) | (7,0) | (0,-)  | (0,-)  b
  * 	Fn | (7,-) | (D1,)  | (D2,) | (S0,) | (S1,)  | (s2,-)  b, d1, d2 = Fn(s0, s1, s2)
  */ 

//MEMORY INSTRUCTION FORMAT

/* MEM Instruction = [<control_pe>, <Type>, <Shift amount>]
* control_pe = [ [<PE_ID>, <Valid>] * (for each group of PE connected to the mem interface), <Namespace Type>]
*
* Opcode (2 bits) :
* 00 - Read
* 01 - Shift
* 10 - EOC
* 11 - WB
* <PE0_ID | valid0 ….  PE15_ID | valid15 | Namespace_ID | Type/opcode | Shift Amount>
*
*/

//A SET OF NON-COMMUNICATING PE INSTRUCTIONS TO CHECK THE PE
/*IN0 : 2  | (4,0)  | (0,-) | (0,-) | (1,0) | (2,0)  | (0,-)  i[0] = w[0] - d[0] = 34 - 12 = 22
 *IN0 :	10 |(100,0) | (0,0) | (0,0) | (1,0) | (10,0) | (0,0) // 010 | (100,00000000) | (000,00000000) | (000,00000000) | (001,00000000) | (010,00000000) | (000,00000000)
 * 
 *IN1 : 0  | (4,1)  | (0,-) | (0,-) | (1,1) | (2,1)  | (0,-)  i[1] = w[1] = 78   (pass)
 *IN1 :	0  |(100,1) | (0,0) | (0,0) | (1,1) | (10,1) | (0,0) // 000 | (100,00000001) | (000,00000000) | (000,00000000) | (001,00000001) | (010,00000001) | (000,00000000)
 * 
 *IN2 :	2  | (4,2)  | (0,-) | (0,-) | (1,2) | (5,0)  | (0,-)  i[2] = w[2] + m[0] = 9A - 12
 *IN2 :	10 |(100,10)| (0,0) | (0,0) | (1,10)| (101,0)| (0,0) // 010 | (100,00000010) | (000,00000000) | (000,00000000) | (001,00000010) | (101,00000000) | (000,00000000)
 */



//MEMORY INSTRUCTIONS FOR THE ABOVE INSTRUCTIONS
/*

00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   00   0000

00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   0000 //0000
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   0001 //4010
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   0010 //0000
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   0011 //0000
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   0100 //000A

00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   0101 //0800
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   0110 //4050
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   0111 //0000
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   1000 //0080
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   1001 //0002

00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   1010 //0000
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   1011 //40A8
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   1100 //0000
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   1101 //0100
00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   01   1110 //000A

00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   01   01   1111 //0012

00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   00   00   0000

00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   10   01   0000 //0034

00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   01   01   0001 //0056

00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   10   01   0010 //0078

00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   10   01   0011 //009A

00 1 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0 00 0   11   01   0100 //0012




 0000 01 00 1 00 //0000
 0001 01 00 1 00 //4010
 0010 01 00 1 00 //0000
 0011 01 00 1 00 //0000
 0100 01 00 1 00 //000A

 0101 01 00 1 00 //0800;
 0110 01 00 1 00 //4050;
 0111 01 00 1 00 //0000;
 1000 01 00 1 00 //0080;
 1001 01 00 1 00 //0002;

 1010 01 00 1 00 //0000;
 1011 01 00 1 00 //40A8;
 1100 01 00 1 00 //0000;
 1101 01 00 1 00 //0100;
 1110 01 00 1 00 //000A;

 1111 01 01 1 00 //0012;

 0000 00 00 1 00

 0000 00 10 1 00 //0034;

 0001 01 01 1 00 //0056;

 0010 01 10 1 00 //0078;

 0011 01 10 1 00 //009A;

 0100 01 11 1 00 //0012;
 */


//A SET OF COMMUNICATING SINGLE PU INSTRUCTIONS TO CHECK A SINGLE PU
//PE0
/*IN0 : 2  | (4,0)  | (0,-) | (0,-) | (1,0) | (2,0)  | (0,-)  i[0] = w[0] - d[0] = 34 - 12 = 22
 *IN0 :	10 |(100,0) | (0,0) | (0,0) | (1,0) | (10,0) | (0,0) // 010 | (100,00000000) | (000,00000000) | (000,00000000) | (001,00000000) | (010,00000000) | (000,00000000)
 * 
 *IN1 : 0  | (4,1)  | (0,-) | (0,-) | (1,1) | (2,1)  | (0,-)  i[1] = w[1] = 78   (pass)
 *IN1 :	0  |(100,1) | (0,0) | (0,0) | (1,1) | (10,1) | (0,0) // 000 | (100,00000001) | (000,00000000) | (000,00000000) | (001,00000001) | (000,00000000) | (000,00000000)
 * 
 *IN2 :	2  | (4,2)  | (0,-) | (0,-) | (1,2) | (5,0)  | (0,-)  i[2] = w[2] - m[0] = 9A - 12 = 88
 *IN2 :	10 |(100,10)| (0,0) | (0,0) | (1,10)| (101,0)| (0,0) // 010 | (100,00000010) | (000,00000000) | (000,00000000) | (001,00000010) | (101,00000000) | (000,00000000)
 * 
 *IN3 :	2  | (4,3)  | (6,1) | (7,3) | (4,2) | (6,0)  | (0,-)  i[3],n,b[3] =  i[2] - n = 88 -36 = 52
 *IN3 :	10 |(100,11)|(110,1)|(111,110)|(100,10) |(110,0) | (0,0) // 010 | (100,00000011) | (110,00000001) | (111,00000110) | (100,00000010) | (110,00000000) | (000,00000000)
 * 
 */
//PE1
/*IN0 : 3  | (4,0)  | (6,0) | (0,-) | (1,0) | (2,0)  | (0,-)  i[0],b[0] = d[0]*w[0] = 3*18 = 0x12 * 0x3 = 0x36
 *IN0 :	11 |(100,0) |(110,0)| (0,0) | (1,0) | (10,0) | (0,0) // 011 | (100,00000000) | (110,00000000) | (000,00000000) | (001,00000000) | (010,00000000) | (000,00000000)
*/

//PE3
/*IN0 : 1  | (4,0)  | (0,-) | (0,-) | (10,0) | (7,0)  | (0,-)  i[0] = d[0]+ b[0] = 0x79 + 0x52 = CB
 *IN0 :	1  |(100,0) | (0,0) | (0,0) | (10,0) | (111,0) | (0,0) // 010 | (100,00000000) | (000,00000000) | (000,00000000) | (010,00000000) | (111,00000000) | (000,00000000)
*/
 