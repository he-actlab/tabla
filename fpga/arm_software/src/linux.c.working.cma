#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
#include <string.h>

#include "cma.h"



/* SYNC_MODE:
 * 0: CPU cache ON (very fast, but no consistent)
 * 1: CPU cache OFF, O_SYNC (slow)
 * 2: CPU cache OFF, O_SYNC, Write Combine ON (fast)
 * 3: CPU cache OFF, O_SYNC, DMA coherent (fast)
 */
#define SYNC_MODE 3
#define size 1024*16*8

int main(int argc, char** argv)
{

  printf("Tabla Loopback Test : \n");


  int dh = open("/dev/mem", O_RDWR | O_SYNC); // Open /dev/mem which represents the whole physical memory
  volatile unsigned int* control_master = mmap(NULL, 65535, PROT_READ | PROT_WRITE, MAP_SHARED, dh, 0x43c00000); // Memory map AXI Lite register block

  unsigned char  attr[1024];
  unsigned int   buf_size;
  int fd;
  if ((fd  = open("/sys/class/udmabuf/udmabuf0/size", O_RDONLY)) != -1) {
    read(fd, attr, 1024);
    sscanf(attr, "%d", &buf_size);
    close(fd);
  }
  printf ("Buf Size = %x %d\n", buf_size, buf_size);

  unsigned long  phys_addr;
  if ((fd  = open("/sys/class/udmabuf/udmabuf0/phys_addr", O_RDONLY)) != -1) {
    read(fd, attr, 1024);
    sscanf(attr, "%x", &phys_addr);
    close(fd);
  }

  cma_open(SYNC_MODE);

  unsigned int i;
  
  volatile long int* a;
  volatile long int* b;

  a = (volatile long int*) cma_malloc(sizeof(long int)*size);
  b = (volatile long int*) cma_malloc(sizeof(long int)*size);

  printf ("Physical Addresses of a and b are : %8x and %8x\n", cma_get_physical_address(a), cma_get_physical_address(b));
  printf ("Physical Addresses of a and b are : %8x and %8x\n", 0x3FFFFFFF, 0x3FFFFFFF);
  
  for(i=0; i<size; i++){
    a[i] = i + 1024;
  }

    printf("CMA\n");
    cma_cache_clean((char*)a, size*sizeof(int));

  struct timeval s, e;

  gettimeofday(&s, NULL);


  for(i=0; i<size; i++){
    b[i] = -1;
  }


	printf("Invoking the accelerator\n\r ");
  printf ("total_cycles : %d\n\r ", *(control_master+4));
    printf ("rd_cycles    : %d\n\r ", *(control_master+5));
    printf ("pr_cycles    : %d\n\r ", *(control_master+6));
    printf ("wr_cycles    : %d\n\r ", *(control_master+7));
	*(control_master+0) = 0x00000000;
	*(control_master+0) = 0x00000001;
  msync (control_master, size, 2);
	printf("Waiting for the accelerator to finish processing\n\r ");
	while (*(control_master+1) != 1) {
		sleep(5);
	}
  msync (control_master, size, 2);

  //for(i=0; i<size; i++){
    //b[i] = a[i];
  //}
  //memcpy((void*)b, (void*)a, size*sizeof(int));

  gettimeofday(&e, NULL);

    //cma_cache_clean((char*)b, size*sizeof(int));

  printf("# end\n");
  int ok = 0;
  
  for(i=0; i<16; i++){
    if(a[i] != b[i]){
      ok++;
      printf("NG: a: %d, b: %d\n", a[i], b[i]);
    }
    else {
      printf("OK: a: %d, b: %d\n", a[i], b[i]);
    }
  }

  if(!ok){
    printf("OK\n");
  }
  else{
    printf("NG : %d\n", ok);
  }

  double exec_time = (e.tv_sec - s.tv_sec) + (e.tv_usec - s.tv_usec) * 1.0E-6;
  printf("exectuion time=%lf\n", exec_time);
  
  cma_close();


    printf ("rd_addr      : %x\n\r ", *(control_master+2));
    printf ("wr_addr      : %x\n\r ", *(control_master+3));
    printf ("RD_ADDRESS   : %x\n\r ", *(control_master+8));
    printf ("WR_ADDRESS   : %x\n\r ", *(control_master+9));

    printf ("total_cycles : %d\n\r ", *(control_master+4));
    printf ("rd_count     : %d\n\r ", *(control_master+5));
    printf ("wr_count     : %d\n\r ", *(control_master+7));
	printf ("==================================================\n\r ");

	printf ("0xDEADBEEF    : %x\n\r ", *(control_master+10));

  printf("Hello World\n");

  return 0;
}
  
